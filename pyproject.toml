[tool.poetry]
name = "django-fsm-2"
version = "4.0.0"
description = "Django friendly finite state machine support."
authors = [
    "Mikhail Podgurskiy <kmmbvnr@gmail.com>",
]
license = "MIT License"
readme = "README.md"
homepage = "http://github.com/django-commons/django-fsm-2"
repository = "http://github.com/django-commons/django-fsm-2"
documentation = "http://github.com/django-commons/django-fsm-2"
classifiers = [
    'Development Status :: 5 - Production/Stable',
    'Environment :: Web Environment',
    'Intended Audience :: Developers',
    'License :: OSI Approved :: MIT License',
    'Operating System :: OS Independent',
    "Framework :: Django",
    "Framework :: Django :: 4.2",
    "Framework :: Django :: 5.0",
    "Framework :: Django :: 5.1",
    "Framework :: Django :: 5.2",
    'Programming Language :: Python',
    'Programming Language :: Python :: 3',
    'Programming Language :: Python :: 3.8',
    'Programming Language :: Python :: 3.9',
    'Programming Language :: Python :: 3.10',
    'Programming Language :: Python :: 3.11',
    'Programming Language :: Python :: 3.12',
    'Programming Language :: Python :: 3.13',
    'Topic :: Software Development :: Libraries :: Python Modules',
]
packages = [{ include = "django_fsm" }]

[tool.poetry.dependencies]
python = "^3.8"
django = ">=4.2"

[tool.poetry.group.graphviz.dependencies]
graphviz = "*"

[tool.poetry.group.dev.dependencies]
coverage = "*"
django-guardian = "*"
graphviz = "*"
pre-commit = "*"
pytest = "*"
pytest-cov = "*"
pytest-django = "*"

[tool.pytest.ini_options]
DJANGO_SETTINGS_MODULE = "tests.settings"

[tool.ruff]
line-length = 130
target-version = "py38"
fix = true

[tool.ruff.lint]
select = ["ALL"]
extend-ignore = [
    "COM812",  # This rule may cause conflicts when used with the formatter
    "D",  # pydocstyle
    "DOC",  # pydoclint
    "B",
    "PTH",
    "ANN",  # Missing type annotation
    "S101",  # Use of `assert` detected
    "RUF012",  # Mutable class attributes should be annotated with `typing.ClassVar`
    "ARG001",  # Unused function argument
    "ARG002",  # Unused method argument
    "TRY002",  # Create your own exception
    "TRY003",  # Avoid specifying long messages outside the exception class
    "EM101",  # Exception must not use a string literal, assign to variable first
    "EM102",  # Exception must not use an f-string literal, assign to variable first
    "SLF001",  # Private member accessed
    "SIM103",  # Return the condition directly
    "PLR0913",  # Too many arguments in function definition
]
fixable = [
    "I",  # isort
    "RUF100",  # Unused `noqa` directive
]

[tool.ruff.lint.extend-per-file-ignores]
"tests/*" = [
    "DJ008",  # Model does not define `__str__` method
]

[tool.ruff.lint.isort]
force-single-line = true
required-imports = ["from __future__ import annotations"]

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
