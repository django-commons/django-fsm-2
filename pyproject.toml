[tool.poetry]
name = "django-fsm-2"
version = "4.0.0"
description = "Django friendly finite state machine support."
authors = [
    "Mikhail Podgurskiy <kmmbvnr@gmail.com>",
]
license = "MIT License"
readme = "README.md"
homepage = "http://github.com/django-commons/django-fsm-2"
repository = "http://github.com/django-commons/django-fsm-2"
documentation = "http://github.com/django-commons/django-fsm-2"
classifiers = [
    'Development Status :: 5 - Production/Stable',
    'Environment :: Web Environment',
    'Intended Audience :: Developers',
    'License :: OSI Approved :: MIT License',
    'Operating System :: OS Independent',
    "Framework :: Django",
    "Framework :: Django :: 4.2",
    "Framework :: Django :: 5.0",
    "Framework :: Django :: 5.1",
    'Programming Language :: Python',
    'Programming Language :: Python :: 3',
    'Programming Language :: Python :: 3.8',
    'Programming Language :: Python :: 3.9',
    'Programming Language :: Python :: 3.10',
    'Programming Language :: Python :: 3.11',
    'Programming Language :: Python :: 3.12',
    'Topic :: Software Development :: Libraries :: Python Modules',
]
packages = [{ include = "django_fsm" }]

[tool.poetry.dependencies]
python = "^3.8"
django = ">=4.2"

[tool.poetry.group.graphviz.dependencies]
graphviz = "*"

[tool.poetry.group.dev.dependencies]
coverage = "*"
django-guardian = "*"
graphviz = "*"
pre-commit = "*"
pytest = "*"
pytest-cov = "^4.1.0"
pytest-django = "*"

[tool.pytest.ini_options]
DJANGO_SETTINGS_MODULE = "tests.settings"

[tool.ruff]
line-length = 130
target-version = "py38"
fix = true

[tool.ruff.lint]
# select = ["ALL"]
extend-select = [
    "F",  # Pyflakes
    "E",  # pycodestyle
    "W",  # pycodestyle
    "UP",  # pyupgrade
    "I",  # isort
    "PERF",
    "RET",
    "C",
    # "B",
    "TCH",  # trailing comma
]
fixable = ["I", "TCH"]


[tool.ruff.lint.isort]
force-single-line = true
required-imports = ["from __future__ import annotations"]

[tool.django-stubs]
django_settings_module = "tests.settings"

[tool.mypy]
python_version = 3.11
plugins = ["mypy_django_plugin.main"]

# Start off with these
warn_unused_configs = true
warn_redundant_casts = true
warn_unused_ignores = true

# Getting these passing should be easy
strict_equality = true
extra_checks = true

# Strongly recommend enabling this one as soon as you can
check_untyped_defs = true

# These shouldn't be too much additional work, but may be tricky to
# get passing if you use a lot of untyped libraries
disallow_subclassing_any = true
disallow_untyped_decorators = true
disallow_any_generics = true

# These next few are various gradations of forcing use of type annotations
disallow_untyped_calls = true
disallow_incomplete_defs = true
disallow_untyped_defs = true

# This one isn't too hard to get passing, but return on investment is lower
no_implicit_reexport = true

# This one can be tricky to get passing if you use a lot of untyped libraries
warn_return_any = true

[[tool.mypy.overrides]]
module = [
    "tests.*",
    "django_fsm.tests.*"
]
ignore_errors = true

# Start off with these
warn_unused_ignores = true

# Getting these passing should be easy
strict_equality = false
extra_checks = false

# Strongly recommend enabling this one as soon as you can
check_untyped_defs = false
# These shouldn't be too much additional work, but may be tricky to
# get passing if you use a lot of untyped libraries
disallow_subclassing_any = false
disallow_untyped_decorators = false
disallow_any_generics = false

# These next few are various gradations of forcing use of type annotations
disallow_untyped_calls = false
disallow_incomplete_defs = false
disallow_untyped_defs = false

# This one isn't too hard to get passing, but return on investment is lower
no_implicit_reexport = false

# This one can be tricky to get passing if you use a lot of untyped libraries
warn_return_any = false

[[tool.mypy.overrides]]
module = "django_fsm.management.commands.graph_transitions"
ignore_errors = true

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
